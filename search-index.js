var searchIndex = {};
searchIndex['config'] = {"items":[[0,"","config","A library to parse and load configuration files.",null,null],[0,"types","","Internal types used to represent a configuration and corresponding primitives to browse it",null,null],[3,"Config","config::types","The top-level `Config` type that represents a configuration",null,null],[3,"Setting","","A `Setting` representation. Settings have a name and a value.",null,null],[12,"name","","Setting name, as read from the configuration file",0,null],[12,"value","","This setting's value. A value can be a scalar, an array, a list, or a group.",0,null],[4,"Value","","A type representing a generic value. `Setting`s store `Value`s.",null,null],[13,"Svalue","","A scalar",1,null],[13,"Array","","An array",1,null],[13,"List","","A list. Arrays can only store scalars of the same type, whereas lists store `Value`s of\npossibly different types, including other lists.",1,null],[13,"Group","","A group. Basically, a group acts as another configuration file - it stores a `SettingsList`.",1,null],[4,"ScalarValue","","The scalar values representation. Scalar values bind directly to Rust primitive types.",null,null],[13,"Boolean","","A boolean scalar",2,null],[13,"Integer32","","An i32 scalar",2,null],[13,"Integer64","","An i64 scalar",2,null],[13,"Floating32","","An f32 scalar",2,null],[13,"Floating64","","An f64 scalar",2,null],[13,"Str","","A string scalar",2,null],[6,"SettingsList","","Settings list representation. Associates settings to their names.",null,null],[6,"ArrayValue","","The type used to represent the scalars inside an array.\nAn array can only store scalar values of the same type.",null,null],[6,"ListValue","","The type used to represent the generic values inside a list.\nLists are heterogeneous and can store any type of value, including other lists.",null,null],[11,"eq","","",3,{"inputs":[{"name":"config"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"config"},{"name":"config"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"setting"},{"name":"setting"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"setting"},{"name":"setting"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"setting"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"scalarvalue"},{"name":"scalarvalue"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"scalarvalue"},{"name":"scalarvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"scalarvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new wrapper `Config` to hold a `SettingsList`",3,{"inputs":[{"name":"config"},{"name":"settingslist"}],"output":{"name":"config"}}],[11,"lookup","","Looks up a value in a configuration. A path is a dot-separated list of settings\ndescribing the path of the desired value in the configuration.\nReturns `None` if the path is invalid. A path is invalid if it is not syntactically\nwell-formed, if it attempts to index an array or list beyond the limit, or if it\nincludes an unknown setting.\n# Examples\nSuppose we have loaded a configuration that consists of:",3,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_boolean","","A convenient wrapper around `lookup()` that unwraps the underlying primitive\ntype of a generic `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_integer32","","A convenient wrapper around `lookup()` that unwraps the underlying primitive\ntype of a generic `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_integer64","","A convenient wrapper around `lookup()` that unwraps the underlying primitive\ntype of a generic `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_floating32","","A convenient wrapper around `lookup()` that unwraps the underlying primitive\ntype of a generic `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_floating64","","A convenient wrapper around `lookup()` that unwraps the underlying primitive\ntype of a generic `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_str","","A convenient wrapper around `lookup()` that unwraps the underlying primitive\ntype of a generic `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_boolean_or","","A convenient wrapper around `lookup_boolean()` that unwraps the underlying primitive\ntype of a boolean `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"lookup_integer32_or","","A convenient wrapper around `lookup_integer32()` that unwraps the underlying primitive\ntype of an integer32 `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"lookup_integer64_or","","A convenient wrapper around `lookup_integer64()` that unwraps the underlying primitive\ntype of an integer64 `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"lookup_floating32_or","","A convenient wrapper around `lookup_floating32()` that unwraps the underlying primitive\ntype of an floating32 `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"lookup_floating64_or","","A convenient wrapper around `lookup_floating64()` that unwraps the underlying primitive\ntype of an floating64 `Value`. If either of `lookup_floating64()` or `lookup` return `None`,\nthen the user-provided default value is returned.",3,{"inputs":[{"name":"config"},{"name":"str"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"lookup_str_or","","A convenient wrapper around `lookup_str()` that unwraps the underlying primitive\ntype of a string `Value`.",3,{"inputs":[{"name":"config"},{"name":"str"},{"name":"str"}],"output":{"name":"str"}}],[11,"new","","Creates a new setting with a given name and value\n# Examples \nLet's say we want to create a setting to store an `i32`.\nWe start by creating a `ScalarValue`:",0,{"inputs":[{"name":"setting"},{"name":"string"},{"name":"value"}],"output":{"name":"setting"}}],[0,"error","config","Errors that can occur while parsing a configuration",null,null],[3,"ConfigError","config::error","A generic configuration error type",null,null],[12,"kind","","Indicates what kind of error this is",4,null],[12,"desc","","A descriptive message about the error",4,null],[12,"detail","","Error details, if available",4,null],[4,"ConfigErrorKind","","Possible error kinds",null,null],[13,"IoError","","An I/O error. Can only occur if reading from a stream (file, socket, etc.)",5,null],[13,"ParseError","","A syntax error",5,null],[5,"from_io_err","","Converts an I/O Error into a `ConfigError`",null,{"inputs":[{"name":"ioerror"}],"output":{"name":"configerror"}}],[5,"from_parse_err","","Converts a `ParseError` into a `ConfigError`",null,{"inputs":[{"name":"parseerror"}],"output":{"name":"configerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"configerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"configerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"configerrorkind"},{"name":"configerrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"configerrorkind"},{"name":"configerrorkind"}],"output":{"name":"bool"}}],[0,"reader","config","Reader types to parse a configuration.",null,null],[5,"from_stream","config::reader","Reads a configuration from a generic stream.\nErrors can be caused by:",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_file","","Reads a configuration from a UTF-8 file.\nErrors can be caused by:",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[5,"from_str","","Reads a configuration from a string slice.\nThe only possible error that can occur is a syntax error.\n# Examples",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Setting"],[4,"Value"],[4,"ScalarValue"],[3,"Config"],[3,"ConfigError"],[4,"ConfigErrorKind"]]};
searchIndex['nom'] = {"items":[[0,"","nom","Nom, eating data byte by byte",null,null],[0,"util","","",null,null],[8,"HexDisplay","nom::util","",null,null],[10,"offset","","",0,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",0,{"inputs":[{"name":"hexdisplay"},{"name":"usize"}],"output":{"name":"string"}}],[10,"to_hex_from","","",0,{"inputs":[{"name":"hexdisplay"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[8,"AsBytes","","",null,null],[10,"as_bytes","","",1,null],[0,"internal","nom","Basic types to build the parsers",null,null],[4,"Needed","nom::internal","",null,null],[13,"Unknown","","",2,null],[13,"Size","","",2,null],[4,"IResult","","Holds the result of parsing functions",null,null],[13,"Done","","",3,null],[13,"Error","","",3,null],[13,"Incomplete","","",3,null],[6,"Err","","Errortype. A integer for now",null,null],[8,"GetInput","","",null,null],[10,"remaining_input","","",4,{"inputs":[{"name":"getinput"}],"output":{"name":"option"}}],[8,"GetOutput","","",null,null],[10,"output","","",5,{"inputs":[{"name":"getoutput"}],"output":{"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"needed"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"needed"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"needed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"iresult"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"iresult"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"iresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_done","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"is_err","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"is_incomplete","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[0,"producer","nom","Data producers",null,null],[3,"FileProducer","nom::producer","Can produce data from a file",null,null],[3,"MemProducer","","Can parse data from an already in memory byte array",null,null],[4,"ProducerState","","Holds the data producer's current state",null,null],[13,"Eof","","",6,null],[13,"Continue","","",6,null],[13,"Data","","",6,null],[13,"ProducerError","","",6,null],[8,"Producer","","A producer implements the produce method, currently working with u8 arrays",null,null],[10,"produce","","",7,{"inputs":[{"name":"producer"}],"output":{"name":"producerstate"}}],[10,"seek","","",7,{"inputs":[{"name":"producer"},{"name":"seekfrom"}],"output":{"name":"option"}}],[11,"eq","","",6,{"inputs":[{"name":"producerstate"},{"name":"producerstate"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"producerstate"},{"name":"producerstate"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"producerstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"fileproducer"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"produce","","",8,{"inputs":[{"name":"fileproducer"}],"output":{"name":"producerstate"}}],[11,"seek","","",8,{"inputs":[{"name":"fileproducer"},{"name":"seekfrom"}],"output":{"name":"option"}}],[11,"new","","",9,null],[11,"produce","","",9,{"inputs":[{"name":"memproducer"}],"output":{"name":"producerstate"}}],[11,"seek","","",9,{"inputs":[{"name":"memproducer"},{"name":"seekfrom"}],"output":{"name":"option"}}],[0,"consumer","nom","Data consumers",null,null],[4,"ConsumerState","nom::consumer","Holds the current state of the consumer",null,null],[13,"Await","","",10,null],[13,"Seek","","",10,null],[13,"Incomplete","","",10,null],[13,"ConsumerDone","","",10,null],[13,"ConsumerError","","",10,null],[8,"Consumer","","Implement the consume method, taking a byte array as input and returning a consumer state",null,null],[10,"consume","","",11,null],[10,"end","","",11,{"inputs":[{"name":"consumer"}],"output":null}],[11,"run","","",11,{"inputs":[{"name":"consumer"},{"name":"producer"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"consumerstate"}],"output":{"name":"consumerstate"}}],[11,"eq","","",10,{"inputs":[{"name":"consumerstate"},{"name":"consumerstate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"consumerstate"},{"name":"consumerstate"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"consumerstate"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"map","nom","Basic combination functions",null,null],[8,"FlatMap","nom::map","flat_map is a method of IResult<R,S>, takes a function Fn(S) -> IResult<S,T>,\nand returns a IResult<S,T>",null,null],[10,"flat_map","","",12,{"inputs":[{"name":"flatmap"},{"name":"f"}],"output":{"name":"iresult"}}],[8,"FlatMapOpt","","map_opt and map_res are used to combine common functions with parsers",null,null],[10,"map_opt","","",13,{"inputs":[{"name":"flatmapopt"},{"name":"f"}],"output":{"name":"iresult"}}],[10,"map_res","","",13,{"inputs":[{"name":"flatmapopt"},{"name":"f"}],"output":{"name":"iresult"}}],[8,"Functor","","map applies a parser function directly to the output of another parser function",null,null],[10,"map","","",14,{"inputs":[{"name":"functor"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","nom::internal","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"flat_map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_opt","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_res","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_opt","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_res","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_opt","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_res","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_opt","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_res","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_opt","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_res","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_opt","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_res","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_opt","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_res","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_opt","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_res","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_opt","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_res","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map","","",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[0,"nom","nom","Useful parser combinators",null,null],[5,"tag_cl","nom::nom","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"not_line_ending","","",null,null],[5,"line_ending","","",null,null],[5,"is_alphabetic","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","",null,null],[5,"digit","","",null,null],[5,"alphanumeric","","",null,null],[5,"space","","",null,null],[5,"multispace","","",null,null],[5,"sized_buffer","","",null,null],[5,"length_value","","",null,null],[5,"be_u8","","",null,null],[5,"be_u16","","",null,null],[5,"be_u32","","",null,null],[5,"be_u64","","",null,null],[5,"le_u8","","",null,null],[5,"le_u16","","",null,null],[5,"le_u32","","",null,null],[5,"le_u64","","",null,null],[5,"be_f32","","",null,null],[5,"be_f64","","",null,null],[14,"dbg!","nom","",null,null],[14,"dbg_dmp!","","",null,null],[14,"closure!","","",null,null],[14,"named!","","",null,null],[14,"call!","","",null,null],[14,"tag!","","declares a byte array as a suite to recognize",null,null],[14,"map!","","maps a function on the result of a parser",null,null],[14,"map_res!","","maps a function returning a Result on the output of a parser",null,null],[14,"map_opt!","","maps a function returning an Option on the output of a parser",null,null],[14,"chain!","","chains parsers and assemble the results through a closure",null,null],[14,"chaining_parser!","","",null,null],[14,"alt!","","try a list of parser, return the result of the first successful one",null,null],[14,"alt_parser!","","",null,null],[14,"is_not!","","returns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_a!","","returns the longest list of bytes that appear in the provided array",null,null],[14,"filter!","","returns the longest list of bytes until the provided parser fails",null,null],[14,"opt!","","make the underlying parser optional",null,null],[14,"cond!","","",null,null],[14,"peek!","","returns a result without consuming the input",null,null],[14,"pair!","","pair(X,Y), returns (x,y)",null,null],[14,"separated_pair!","","separated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded!","","preceded(opening, X) returns X",null,null],[14,"terminated!","","terminated(X, closing) returns X",null,null],[14,"delimited!","","delimited(opening, X, closing) returns X",null,null],[14,"separated_list!","","separated_list(sep, X) returns Vec<X>",null,null],[14,"separated_nonempty_list!","","separated_nonempty_list(sep, X) returns Vec<X>",null,null],[14,"many0!","","Applies the parser 0 or more times and returns the list of results in a Vec",null,null],[14,"many1!","","Applies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"count!","","",null,null],[14,"take!","","generates a parser consuming the specified number of bytes",null,null],[14,"take_until_and_consume!","","generates a parser consuming bytes until the specified byte sequence is found",null,null],[14,"take_until!","","",null,null],[14,"take_until_either_and_consume!","","",null,null],[14,"take_until_either!","","",null,null],[14,"length_value!","","returns",null,null],[14,"pusher!","","Prepares a parser function for a push pipeline",null,null],[14,"flat_map_ref_impl!","","derives flat_map implementation for a list of IResult types with referenced types\nlike str or vectors",null,null],[14,"flat_map_impl!","","derives flat_map implementation for a list of specific IResult types",null,null],[14,"map_ref_impl!","","derives map_opt and map_res implementations for a list of IResult types with referenced types\nlike str or vectors",null,null],[14,"map2_ref_impl!","","",null,null]],"paths":[[8,"HexDisplay"],[8,"AsBytes"],[4,"Needed"],[4,"IResult"],[8,"GetInput"],[8,"GetOutput"],[4,"ProducerState"],[8,"Producer"],[3,"FileProducer"],[3,"MemProducer"],[4,"ConsumerState"],[8,"Consumer"],[8,"FlatMap"],[8,"FlatMapOpt"],[8,"Functor"]]};
initSearch(searchIndex);
